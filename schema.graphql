# See Types in: https://thegraph.com/docs/define-a-subgraph
#   - Bytes: Byte array, represented as a hexadecimal string. Commonly used for Ethereum hashes and addresses
#   - ID:	Stored as a string
#   - string: Scalar for string values
#   - boolean: Scalar for boolean values
#   - Int	The GraphQL spec defines Int to have size of 32 bytes
#   - BigInt	Arbitrarily large integers. Used for Ethereum's uint32, int64, uint64, ..., uint256 types. Note: Everything below uint32, such as int32, uint24 or int8 is represented as i32.
#   - BigDecimal	BigDecimal is used to represent arbitrary precision decimals

type Token @entity {
  id: ID! # tokenId
  address: Bytes!
  fromBatchId: BigInt!
  createEpoch: BigInt!
  # TODO: symbol
  # TODO: decimals
  # TODO: name
  txHash: Bytes!
}

type Order @entity {
  id: ID! # ownerAddress + orderId
  owner: Bytes! # address - TODO: User
  orderId: Int! # uint16
  fromBatchId: BigInt! # uint32
  fromEpoch: BigInt!
  untilBatchId: BigInt! # uint32
  untilEpoch: BigInt!
  buyToken: Int! # uint16 - TODO: Token
  sellToken: Int! # uint16 - TODO: Token
  priceNumerator: BigInt! # uint128
  priceDenominator: BigInt! # uint128
  maxSellAmount: BigInt!
  soldAmount: BigInt!
  # TODO: trades
  createEpoch: BigInt!  
  #cancelEpoch: BigInt!
  #deleteEpoch: BigInt!
  txHash: Bytes!,
  txLogIndex: BigInt!,
}